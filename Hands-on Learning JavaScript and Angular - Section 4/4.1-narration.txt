Hello and welcome to fourth and final section of this learning series.

In this section we will cover some more important concepts of web app development. 
No matter which framework you are using you will run into these patterns And Its always 
good to have good grasp on these topics. So here is what we are going to talk about in this
section:
- Routing 
- Http calls 
- Unit testing in Angular
- Then we will move into some of the devops side of things and will try to learn how to deploy our app.

So pleanty to learn, lets get going:

Welcome to first video of this section, 

Agenda:
- What is Routing?
- Why do we need routing?
- How to configure routes?


Okay!
Lets say we have a new requirement for our travel blog, say we need a dashboard view.
The navigation between the dashboard view and the countries is to be arranged like this (show flow diagram here,
and talk about the flow in the diagram).

Okay,
lets try to break this requirement into two pieces:
1. we need a navigation to facilitate display of various components that we have already created.
2. we need a wrapper component called dashboard, which going forward can also serve as landing view for
our app.

So lets get to first task here:
We will facilitate this navigation between components using routing in angular. Its among few best practices that
we configure our router as a seperate top level module.
to do it lets create app-routing module, and in almost all scenarios you should be able to control and configure 
your routing from this module. 

command: ng generate module app-routing --flat --module=app
flat : creates it in app/src
module=app: register this module in the import array of AppModule

Generally, and you would note this too as you code more in angular we really dont need to declare components 
in our routing module,
hence we can remove the declarations and Common modules from import array from the app-routing module.

now we will configure router using the Routes in the RouterModule, 
both routes and RouterModule are part of the optional angular service, to put it in basic terms this enables us to 
present a particular component for a given URL. you may also notice that this not part of angular core library but has 
a seprate one as can be seen here:
'@angular/router';


so lets import these two and register 
RouterModule in the export array of app-routing module. this ensure router directives are available in 
AppModule components.

Now lets add routes

A typical angular route has two properties:
1. path
2. component

now we intend to navigate to travelled coutries list for path localhost:4200/countries so lets configure the same.

const routes: Routes = [
  {path:'countries', component: IndexListComponent}
];

now for this to be functional we need our router config to be listening to browser changes, we do it by registering 
our config to RouterModule using forRoot method in the import array.

@NgModule({
  imports: [RouterModule.forRoot(routes)],
  exports: [ RouterModule ]
})


**************** app-routing.module.ts ****************

import { NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';
import { Routes, RouterModule } from '@angular/router';

import { IndexListComponent } from './index-list/index-list.component';


const routes: Routes = [
  {path:'countries', component: IndexListComponent}
];


@NgModule({
  imports: [RouterModule.forRoot(routes)],
  exports: [ RouterModule ]
})
export class AppRoutingModule { 
}
***************** end **********************

Now we have out countries route configured, but there is still one pending thing, we need to ensure that 
countries are listed when user clicks on the countries link on the dashboard page.  TO do that go to 
app.component.html file and remove that direct invocation of index-list component  and inject a router link
instead. we will use <nav> element to link this up.

***************** app.component.html *********
<div style="text-align:center">
  <h1>
    Welcome to {{ title }}!
  </h1>
  <br/>
  <nav>
    <a routerLink="/countries">Countries</a>
  </nav>
  <router-outlet></router-outlet>
</div>
*********************************************

And this should do, we have /countries path configured.



< part - 2 >

Now lets create the dashboard view we talked about and use a bit more routing. This ideally should cover most of the 
use cases that generally run into while handling routing for your app.

Lets first create a dashboard component like we have been doing so far.
command: ng generate component dashboard

We are not doing anything new here, simple registering a new variable called topCountries and filing it up with the service 
call we learned in our previous videos.

***************** dashboard.componnent.ts *********
import { Component, OnInit } from '@angular/core';
import { CountryService } from '../country.service';
import {Country} from './../country';

@Component({
  selector: 'app-dashboard',
  templateUrl: './dashboard.component.html',
  styleUrls: ['./dashboard.component.css']
})
export class DashboardComponent implements OnInit {

  topCountries: Country[];
  constructor(private countryService: CountryService) { }

  ngOnInit() {
    this.getTopCountries();
  }

  getTopCountries(): void {
    this.countryService.getCountries().subscribe(countries =>
    this.topCountries = countries.slice(1,3));
  }
}
*********************************************

Now we are going to create the template for this component.

***************dashboard template*******************

<br/><br/><br/>
<h3>Top countries visited</h3>
<div class="grid grid-pad">
  <a *ngFor="let country of topCountries" class="col-1-4" 
  //include router thing when talking about POINT_ONE
  routerLink="/destinations/{{country.id}}">  
  // end
    <div class="module hero">
      <h4>{{country.name}}</h4>
    </div>
  </a>
</div>
*********************************************

Note i am using styling classes that i have already created, you can use the same classes if you want link to the code repo is available at the end of each section.

Now we have dashboard component created, now we need tp stich this up with our router module.
So lets come to our routing module ts file and add these new paths

*********************************************
const routes: Routes = [
  { path: '', redirectTo: '/dashboard', pathMatch: 'full' },  // this is to redirect from localhost:4200 to dashboard
  {path: 'dashboard', component: DashboardComponent}, // to land on the dashboard component
  {path:'countries', component: IndexListComponent},
];

*********************************************

And there we have it.


Now we need to link these components togather, what i mean here is:


User should be able to see destinations of a country either from dashboard or from country list view.
For this we need to decouple the indexlist component with destination list component

Just comment the line shown here:
*********************************************
<h2><p appHighlight>Countries covered</p></h2>
<ul class="countries">
  <li *ngFor="let country of countries" (click)='onSelect(country)'>
    <span class="badge">{{country.id}}</span> {{country.name}}
  </li>
</ul>
<br/>
<!-- remove destination list compoent as we are decoupling them -->
<!-- <app-destination-list [country]="selectedCountry"></app-destination-list> -->
<br/><br/>
<app-country-selected [country]="selectedCountry"></app-country-selected>
*********************************************

Now lets add destination list to the path:

*********************************************
const routes: Routes = [
  { path: '', redirectTo: '/dashboard', pathMatch: 'full' },
  {path: 'dashboard', component: DashboardComponent},
  {path:'countries', component: IndexListComponent},
  { path: 'destinations/:id', component: DestinationListComponent }, // here id will be the id of country selected.
];
Note that colon in the path indicates that this is a place holder and will be replaced by a runtime value.

*********************************************

POINT_ONE:

Now we need to link dashboard with the hero details component. we can do it by simple addding an attribute to 
the existing anchor tag like:
routerLink="/destinations/{{country.id}}">  

Now by angular interpolation way of binding each list element is binded to a link path.
Ok, now we dont need the onSelect method to be in place as we have already established a link from the list element to
the next component to be displayed.

So we can remove the dead code from index component ts file, just like this:
  // selectedCountry: Country;

  // // on select action
  // onSelect (country: Country) {
  //   // assign clicked country as selected country.
  //   this.selectedCountry = country;
  // }

  component looks much cleaner now, isnt it.


So now click to countries takes us to destination/id

Now the destination list component needs to handle this, so what we need to do is:
- Get the route landed on the comp
- extract id
- Get country with that id
- display list of destinations for the country.


*********************************************
import { Component, OnInit, Input } from '@angular/core';
import { Country } from './../country';
import {ActivatedRoute} from '@angular/router';
import { Location } from '@angular/common';
import {CountryService} from './../country.service';

@Component({
  selector: 'app-destination-list',
  templateUrl: './destination-list.component.html',
  styleUrls: ['./destination-list.component.css']
})
export class DestinationListComponent implements OnInit {

  constructor(private route: ActivatedRoute,
              private countryService: CountryService,
              private location: Location) { }

  ngOnInit() {
    this.getCountry();
  }

  country: Country;
  // @Input() country: Country;

  getCountry(): void {
    const id = +this.route.snapshot.paramMap.get('id');
    this.countryService.getCountryWithId(id).subscribe(country => this.country = country);
  }
}

*********************************************

Here:
- route.snapshot is static image of the route information as soon as the component is created.
- the paramMap is a dictionary of route params. So this is where we can extract id from the route.
- + sign is here, because id is a string by default(route param), this converts it into a number type.

Now we need our country service to support new api which takes an id and returns a country.

*****************************************
getCountryWithId(id): Observable<Country> {
    this.loggerService.log("Getting country with id countries..");
    return of(COUNTRIES.find(country => country.id === id));
}
*****************************************

And there we have it.

OK, another practice question for you now! we can do return using browser's back button. But would it be nice if there is a back button
on the destination list component to return to dashboard or countries component.
So do try it out.

So in this video we learnt about:
- We understood creating simple routes
- We understood creating redirect routes
- We understood creating parameterized route
- We refactored tightly coupled index-list and destination-list components into a routed flow.
- 

Ok so thats all about routing in angular, this is an extreamly useful feature when developing enterprise grade application.
Here is what we covered

Hopefully you had a great time learning it




In the next video, we will talk about Http calls in angular.



