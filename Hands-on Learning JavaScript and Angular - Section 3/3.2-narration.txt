Hello and welcome to 2nd video of this section

in this video we are going to build upon what we learned in video 1 and see 
what is that we missed out and how can we fix it.

Agenda:
- nature of service calls,
- observables in angular
- demo!



now going back to the implementation of services we did in the last video,
if you note we are expecting the data (list of countries) to be made available as soon as
service call is made. Well this WRONG, the service generally indicates you 
are trying to invoke some remote system to fetch some data and you cant aspect it to
be synchronous.
Make sense!

What i mean is, when we do this.countryService.getCountries() and this does an IO on 
a remote system to fetch list of countries, all this while you cant expect browser sit idol and
wait for the concerned remote system to respond. Our calls should be async and should 
work on the principle of promises.

Meet "Observables"

Observables are one of the key classes in RxJS library for angular.
In coming video we will be using Angular's HttpClient which returns Observables,
but to understand current video's use case we will be simulating fetching 
data from a remote server and make our call async.

Let revisit country.service.ts 
import observables from observables module (refer code)

replace return type decleartion of getCountries call to an Observable and return 
COUNTRIES (mock list) encapsulated in a Observable wrapper (this is done by of method)


Now since our service is returning an observable components using this service needs to make 
some adjustment as well and will have to subscribe to call complete of this service.


Adjust the getCountries method and subscribe to the service call, this ensures as and when the 
call completes that lambda expression passed as param is executed and that updated the local 
variable for country list to the one returned by the service.


Simple isnt it! :)


Alright, that is all for this video, in the next video we learn what is dependency injections 
in angular.


Stay tuned, and thanks for watching.

