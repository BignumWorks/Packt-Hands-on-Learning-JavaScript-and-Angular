Welcome to third video of this section

In this section we will learn about binding in angular

Agenda:
- What is data binding 
- types of data binding in angular
- then we will use this binding in our app and will cover both variants of it.


What is data binding in Angular:
Imagine there were no frameworks like Angular, as FE developer you would have been responsible for pushing 
data values into HTML and then controlling user interaction on the that. If you have fair bit of FE dev 
experience especially jquery guys you would know what i am talking about. This can be extreamly painful,
cumbersome and prone to bugs.
In short its a recipe to disaster.

To prevent us from any disasters Angular provide us a binding mechanism which enables us to coordinate
parts of template (html code) with parts of component behavior.

There are maily four ways in which angular allows us to achieve this:
1. interpolation
>> If you see example we did in last video where in we used
{{country.id}} and {{country.name}} here we binding component property onto
template. 

2. and 3. event binding and  property binding
- Lets write some code to understand event binding first:
Lets take some action when user clicks on a country, in the index-list.component.ts declare a variable called
selectedCountry

now subscribe to click action on the list items in the index-list.component.html as shown in the code, the code 
indicates that upon clicking on the list item onSelect method shall be invoked that initialises the local variable
of the component defined above.

now you can use this variable (selectedCountry) in the view of the component as shown in the index-list.component.html 

This is event binding that propagates data from view to component.

- Now lets understand property binding
To understand property binding, first lets understand this:
in our example below there is one thing that we should address, here one component i.e. index-list component is owing control
for potentially two patches on presentable screen, what i mean is displaying the selected country can be easily delegated 
to seperate angular component.

Lets try this:
- create a new angular compoent called country-selected
// command : ng generate component country-selected

now in this component declare that this component is expecting a input from its invoking parent
- we can do this by @input decorator.

- now in the view/template of this new component cut-copy the code from index-list component view where 
we are displaying selected country as this what exaclty is delegated to new component.

- now pass the property from index-list component to selected-country component, as shown below:
<app-country-selected [country]="selectedCountry"></app-country-selected>

Here we are binding prop from view to child component.



Now the 4th type of binding :
2-way binding:

This essentially allows us to transmit data between view (template) and component in bidirectional nature.
Lets see how:
- Create a input box in selected country component to display country name, and also have it editable.
- Use ngModel element property provided by Forms module and link country name to this property.
(refer code.)
- please make sure you import FormModule in the app.component.ts file so that the same is now importable
for all child component in the app. This is among several helpful convention followed when developing 
enterprise apps.

- save and observe on the browser.
Now when select a country and try to edit its name in the text box created, the change is getting binded from
template to component values as well and The text box got its initial value in first place when data was binded from
component to template.

Hence this is two way binding.

This was all about binding in Angular.


While writing code for this exercise, you must have noted and empty id when no country is selected well , this was 
left purposely as this gives us ground for our next video.. see you there..


Thanks for watching.



































